import threading
import requests
import time
import pandas
import random
from random import randint
import pandas
import os

def send_message(text, peer_id, access_token, username): # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∫
    random_id = random.randint(100000, 1000000000)
    r = requests.get('https://api.vk.com/method/messages.send', params={
        'v': 5.124,
        'peer_id': peer_id,
        'access_token': access_token,
        'message': text,
        'random_id': random_id
    }).json()
    if 'error' in r and r['error']['error_code'] == 14:
        time.sleep(5*60)

def send_debug(text):
    random_id = random.randint(100000, 1000000000)
    r = requests.get('https://api.vk.com/method/messages.send', params={
        'v': 5.124,
        'peer_id': 189890658,
        'access_token': '3f713846ca1182c6e163a63eb6b5572bb6c0815f58d04f5723f79f614f041899ab1e448bdebd11ce2729e',
        'message': text,
        'random_id': random_id
    }).json()

def send_anon_cb1(address, access_token, vk_username):
    r = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': -140876144,
        'access_token': access_token,
        'count': 1
    }).json()
    if 'error' in r:
        send_debug(vk_username + '\n' + '–ø–æ—Ö–æ–∂–µ, —á—Ç–æ –∞–∫–∫ –æ—Ç–ª–µ—Ç–µ–ª')
        time.sleep(15*60)
    else:
        peer_id = -140876144
        send_message('!c', peer_id, access_token, vk_username)
        time.sleep(2)
        send_message('!–Ω', peer_id, access_token, vk_username)
        time.sleep(2)

        # –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –∏—Ö
        msg_list = gen_cb_msgs(address)
        for msg in msg_list:
            send_message(msg, peer_id, access_token, vk_username)
            time.sleep(2)

        time.sleep(5)

def send_anon_cb2(address, access_token, vk_username):
    peer_id = -190262367
    send_message('!—Å—Ç–æ–ø', peer_id, access_token, vk_username)
    time.sleep(2)
    send_message('!–ø–æ–∏—Å–∫', peer_id, access_token, vk_username)
    time.sleep(2)

    # –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –∏—Ö
    msg_list = gen_cb_msgs(address)
    for msg in msg_list:
        send_message(msg, peer_id, access_token, vk_username)
        time.sleep(2)

    time.sleep(5)

def send_anon_cb3(address, access_token, vk_username):
    peer_id = -132834409
    r = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': peer_id,
        'access_token': access_token,
        'count': 1
    }).json()
    message_text = r['response']['items'][0]['text']
    if '–≤–æ–∑—Ä–∞—Å—Ç' in message_text:
        send_message('16', peer_id, access_token, vk_username)

    send_message('!—Å—Ç–æ–ø', peer_id, access_token, vk_username)
    time.sleep(2)
    send_message('!–Ω–æ–≤—ã–π', peer_id, access_token, vk_username)
    time.sleep(2)

    # –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –∏—Ö
    msg_list = gen_cb_msgs(address)
    for msg in msg_list:
        send_message(msg, peer_id, access_token, vk_username)
        time.sleep(2)

    time.sleep(5)

def send_anon_cb4(address, access_token, vk_username):
    peer_id = -71729358
    send_message('!—Å—Ç–æ–ø', peer_id, access_token, vk_username)
    time.sleep(2)
    send_message('!–º–∂', peer_id, access_token, vk_username)
    time.sleep(2)

    # –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –∏—Ö
    msg_list = gen_cb_msgs(address)
    for msg in msg_list:
        send_message(msg, peer_id, access_token, vk_username)
        time.sleep(2)

    time.sleep(5)

def send_anon_cb5(address, access_token, vk_username):
    peer_id = -66678575
    send_message('!—Å—Ç–æ–ø', peer_id, access_token, vk_username)
    time.sleep(2)
    send_message('!–º–∂', peer_id, access_token, vk_username)
    time.sleep(2)

    # –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –∏—Ö
    msg_list = gen_cb_msgs(address)
    for msg in msg_list:
        send_message(msg, peer_id, access_token, vk_username)
        time.sleep(2)

    time.sleep(5)

def is_all_banned(access_token, vk_username):
    data = {'cb1': False, 'cb2': False, 'cb3': False, 'cb4': False, 'cb5': False}
    cb1 = True
    cb2 = False
    cb3 = False
    cb4 = False
    cb5 = False

    # –ø–µ—Ä–≤—ã–π –±–æ—Ç

    # a_request = requests.get('https://api.vk.com/method/messages.getHistory', params={
    #     'v': 5.124,
    #     'peer_id': -140876144,
    #     'access_token': access_token,
    #     'count': 10
    # }).json()
    # for item in a_request['response']['items']:
    #     if item['from_id'] == -140876144:
    #         cb1 = False
    #         break
    # data['cb1'] = cb1

    r = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': -140876144,
        'access_token': access_token,
        'count': 1
    }).json()
    message_text = r['response']['items'][0]['text']
    if '—Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É' in message_text:
        cb1 = True
    else:
        cb2 = False
    data['cb1'] = cb1

    # –≤—Ç–æ—Ä–æ–π –±–æ—Ç
    b_request = requests.get('https://api.vk.com/method/groups.getById', params={
        'v': 5.124,
        'group_id': 190262367,
        'access_token': access_token,
        'fields': 'ban_info'
    }).json()
    if 'ban_info' in b_request['response'][0]:
        cb2 = True
    data['cb2'] = cb2

    # —Ç—Ä–µ—Ç–∏–π –±–æ—Ç
    c_request = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': -132834409,
        'access_token': access_token,
        'count': 10
    }).json()
    for item in c_request['response']['items']:
        if '‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞ –¥–æ' in item['text']:
            cb3 = True
    data['cb3'] = cb3

    # —á–µ—Ç–≤–µ—Ä—Ç—ã–π –±–æ—Ç
    d_request = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': -71729358,
        'access_token': access_token,
        'count': 10
    }).json()
    for item in d_request['response']['items']:
        if '—á–∞—Ç–∞ –ø–æ –∂–∞–ª–æ–±–µ' in item['text'] or '–æ—Ç–º–µ—á–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π' in item['text'] or '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã' in item['text']:
            cb4 = True
    data['cb4'] = cb4

    # –ø—è—Ç—ã–π –±–æ—Ç
    e_request = requests.get('https://api.vk.com/method/messages.getHistory', params={
        'v': 5.124,
        'peer_id': -66678575,
        'access_token': access_token,
        'count': 10
    }).json()
    for item in e_request['response']['items']:
        if '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ' in item['text']:
            cb5 = True
    data['cb5'] = cb5

    fulldata = f'{vk_username} \n—è –∑–∞–±–∞–Ω–µ–Ω \ncb1: {cb1} \ncb3: {cb3}'

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω
    if cb1 or cb3:
        #send_debug(fulldata)
        pass

    return data

def random_rate(rate):
    value = random.randint(0, 100)
    if value < rate:
        return True
    else:
        return True

def read_name():
    try:
        file = open('cb_name.txt', 'r')
        name = file.read()
        file.close()
    except:
        name = None
    return name

def random_capitalize(text):
    a = random.randint(0, 1)
    if a == 0:
        return text.capitalize()
    else:
        return text

def gen_cb_msgs(address):
    hi = random.choice(['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤)', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–ø—Ä–∏–≤–∫–∏', '–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –∑–æ–≤—É—Ç?', '–ø—Ä–∏–≤–µ—Ç, –¥17'])
    smth = random.choice(['—Ö–æ—á–µ—à—å —Å–∫–∏–Ω—É –∏–Ω—Ç–∏–º–∫–∏ —à–∫–æ–ª—å–Ω–∏—Ü?', '–µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ 18+) –ø–æ–∫–∞–∑–∞—Ç—å?',
                          '—Ö–æ—á–µ—à—å —Å–ª–∏–≤ —à–∫–æ–ª—å–Ω–∏—Ü?', '—É –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–∏–≤—ã –º–∞–ª–æ–ª–µ—Ç–æ–∫', '—É –º–µ–Ω—è –µ—Å—Ç—å –Ω—é–¥—Å—ã –º–∞–ª–æ–ª–µ—Ç–æ—á–µ–∫',
                          '—É –º–µ–Ω—è –µ—Å—Ç—å –Ω—é–¥—Å—ã –º–∏–ª—ã—Ö —à–∫–æ–ª—å–Ω–∏—Ü', '—Ö–æ—á–µ—à—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–æ—Å–∏–∫–∏ —Å–æ —à–∫–æ–ª—å–Ω–∏—Ü–∞–º–∏?',
                          '–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –Ω—é–¥—Å—ã —à–∫–æ–ª—å–Ω–∏—Ü?', '—Ç–µ–±–µ —Å–∫–∏–Ω—É—Ç—å –∏–Ω—Ç–∏–º–∏–∫ –º–∏–ª—ã—Ö —à–∫–æ–ª—å–Ω–∏—Ü?'])
    search = random.choice(['–≤–±–µ–π –≤ —Ç–µ–µ–ª–µ–≥–≥–µ', '–∏—â–∏ –≤ —Ç–∏–µ–ª–µ–µ–≥—Ä–∞–º–µ', '–Ω–∞–π–¥–∏ –≤ —Ç–∏–µ–ª–ª–µ–≥—Ä–∞–º–µ'])
    channel = random.choice(['‚Äî', '-', ':', '']) + ' ' + address

    msg_list = [random_capitalize(hi), random_capitalize(smth), random_capitalize(search + ' ' + channel)]
    return msg_list

def gen_cb_msg():
    a = random.choice(['—Å–ª–ª–∏–≤', '—Å–ª–∏–∏–≤–∞–µ–º', '—Å—Å–ª–∏–≤—ã'])
    b = random.choice(['–≥–æ–ª—ã—Ö', '–æ–±–Ω–∞–∂—ë–Ω–Ω—ã—Ö', '—Ä–∞–∑–¥–µ—Ç—ã—Ö', '–ø–æ—à–ª—ã—Ö'])
    c = random.choice(['—à–∫–æ–ª—å–Ω–∏—Ü', '–º–∞–ª–æ–ª–µ—Ç–æ–∫'])
    d = random.choice(['–∏—â–∏ –≤', '–ø–∏—à–∏ –≤'])
    e = random.choice(['—Ç–µ–µ–ª–µ–≥—Ä–∞–º–º–µ', '—Ç–µ–ª–ª–µ–≥—Ä–∞–º–µ'])
    emoji = random.choice(['‚ù§', 'üòâ', 'üíî', 'üåà', 'üî•', 'üí¶', 'üçí'])

    a = spacing(a)
    b = unicalize_text(b)
    c = unicalize_text(c)
    d = unicalize_text(d)
    e = spacing(unicalize_text(e))

    msg = f'{a} {b} {c} {emoji} \n{d} {e}'
    return msg

def spacing(text):
    space_index = random.randint(2, 3)
    result = text[:space_index] + ' ' + text[space_index:]

    return result

def unicalize_text(text):
    length = len(text)

    # –ø–æ–≤—Ç–æ—Ä—ã
    slice_index = random.randint(0, int(length/2))
    slice_length = 1

    repeated = text[:slice_index] + text[slice_index:slice_index+slice_length] + text[slice_index:]

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º –±—É–∫–≤—ã (–Ω–µ —é–∑–∞–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º)
    # letter = random.choice(['—ã', '—å', '—ä', '—ç', '—Ü'])
    # letter_index = random.randint(1, 3)
    # lettered = repeated[:letter_index] + letter + repeated[letter_index:]

    result = repeated
    return result

def chatbot_spam(ACC_ID): # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ê–°C_ID = 3 (–¥–ª—è –ø–µ—Ä–µ–∑–∞–ª–∏–≤–∞)
    cycles = 4
    cb1_ban = False
    cb2_ban = False
    cb3_ban = False
    cb4_ban = False
    cb5_ban = False

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    time.sleep(ACC_ID*15)
    print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
    while True:
        data = pandas.read_csv('https://raw.githubusercontent.com/colorfulpaintofapriltoday/data/main/vk1.csv')
        acc_type = 'cb_vkusno'
        access_token = str(data.loc[(data['acc_id'] == ACC_ID) & (data['type'] == acc_type)]['token'].values.item())
        vk_username = data.loc[(data['acc_id'] == ACC_ID) & (data['type'] == acc_type)]['username'].values.item()

        address = read_name()
        if access_token != 'nan' and address != None:
            try:
                if cycles > 6:
                    cycles = 0
                    ban_data = is_all_banned(access_token=access_token, vk_username=vk_username)
                    cb1_ban = ban_data['cb1']
                    cb2_ban = ban_data['cb2']
                    cb3_ban = ban_data['cb3']
                    cb4_ban = ban_data['cb4']
                    cb5_ban = ban_data['cb5']
                else:
                    if not cb1_ban:
                        send_anon_cb1(address, access_token, vk_username) # –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
                    if not cb2_ban:
                        send_anon_cb2(address, access_token, vk_username) # –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –±–æ—Ç
                    if not cb3_ban:
                        send_anon_cb3(address, access_token, vk_username) # –°—Ç—É–¥–µ–Ω—Ç–∫–∏ | –ß–∞—Ç
                    if not cb4_ban and random_rate(50):
                        send_anon_cb4(address, access_token, vk_username) # –ü–û–ó–û–†„Ç∑
                    if not cb5_ban and random_rate(50):
                        send_anon_cb5(address, access_token, vk_username) # –û–≤—Å—è–Ω–∫–∞, —Å—ç—Ä!
                    cycles += 1
            except Exception as e:
                time.sleep(1)
                print(f'ERROR:\n-----\n{str(e)}\n-----')
        else:
            print('–¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Å–ø–ª—é...')
            time.sleep(5*60)

def main():
    # —á–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤
    acc_data = pandas.read_csv('https://raw.githubusercontent.com/colorfulpaintofapriltoday/data/main/vk1.csv')
    thread_count = int(acc_data.loc[acc_data['type'] == 'cb_vkusno']['acc_id'].iloc[-1])

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    thread_list = []
    for i in range(0, thread_count):
        th = threading.Thread(target=chatbot_spam, args=(i, ))
        thread_list.append(th)
    for th in thread_list:
        th.start()
    for th in thread_list:
        th.join()

main()
